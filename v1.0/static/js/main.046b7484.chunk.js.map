{"version":3,"sources":["state/slices/landscapes.reducer.js","hooks/landscapes.js","nav.js","components/NFT/NFT.js","components/LandscapeCard/LandscapeCard.js","components/LandscapesList/LandscapesList.js","components/AccountDetailPage.js","components/AllAuctionsPage.js","components/AllLandscapesPage.js","state/slices/app.reducer.js","state/slices/lottery.reducer.js","state/store.js","components/LandscapeLink.js","web3/notifications.js","web3/contract.service.js","components/AccountAddress.js","components/Countdown.js","components/LandscapeAuctionDetailView/StartAuctionModal.js","components/LandscapeAuctionDetailView/LandscapeAuctionDetailView.js","components/ChangeProcessingHint.js","components/LandscapeNameView/LandscapeNameView.js","components/OwnerHistoryView/OwnerHistoryView.js","components/TransferOwnershipView/TransferOwnershipView.js","components/LandscapeDetailView/LandscapeDetailView.js","components/LandscapeDetailPage.js","components/LotteryWithdrawModal/LotteryWithdrawModal.js","components/LotteryView/LotteryView.js","components/WithdrawalView/WithdrawalView.js","components/MyAuctionsPage.js","components/MyLandscapesPage.js","components/NavigationBar.js","components/NotFoundPage.js","App.js","index.js"],"names":["landscapesSlice","createSlice","name","initialState","landscapes","loading","uiState","reducers","setLandscapes","state","payload","updateLandscape","landscape","Number","landscapeId","finishLandscapesLoading","startLandscapesLoading","setBidHistory","bids","auction","addAuctionBid","auctionId","bidder","amount","time","unshift","setOwnerHistory","ownerHistory","setLandscapeUiState","topic","value","actions","useAccountLandscapes","ethAddress","useSelector","myLandscapes","useMemo","filter","owner","toLowerCase","useRunningAuctionsFilter","running","useUiState","dispatch","useDispatch","landscapeUiState","turnOn","useCallback","turnOff","navTo","navState","window","location","href","encodeURIComponent","btoa","JSON","stringify","randomColor","require","NFT","dna","style","baseImgPath","featureValues","i","push","substring","Error","hues","featureColors","count","hue","seed","bgColors","className","Math","random","toString","substr","src","dangerouslySetInnerHTML","__html","join","LandscapeCard","onClick","keyword","LandscapesList","map","l","AccountDetailPage","address","Loader","size","center","AllAuctionsList","allAuctions","AllLandscapesList","INITAL_NAV_STATE","appSlice","initialized","hash","startsWith","data","parse","atob","decodeURIComponent","e","getPersistedNavState","error","withdrawableEth","isWithdrawing","finishInit","appNavigate","setMyETHAddress","setOwner","setAppError","setWithDrawableEth","setIsWithdrawing","lotterySlice","participating","locked","myShares","totalShares","participants","availableWinWithdrawals","showWithdrawModal","withdrawLocked","selectedShares","addParticipation","delParticipation","lockLottery","unlockLottery","lockAdminLottery","adminLocked","unlockAdminLottery","setMyShares","amountOfShares","setTotalShares","setParticipants","addLatestParticipant","participant","includes","setAvailableWinWithdrawals","nrOfAvailableWithdrawals","setShowWithdrawModal","show","lockWithdraw","unlockWithdraw","setSelectedShares","store","configureStore","reducer","landscapesReducer","app","appReducer","lottery","lotteryReducer","onhashchange","console","log","splitted","newURL","split","length","LandscapeLink","children","preventDefault","receivedLandscape","Notification","info","title","duration","description","auctionCreated","outbidModal","ContractService","init","a","ethereum","web3","Web3","enable","contract","eth","Contract","LandscapeContract","requestAccounts","accounts","refreshAccount","on","initListeners","account","methods","call","loadParticipants","loadInitialData","convertWeiToEth","utils","fromWei","loadAllLandscapes","loadAvailableNftWithdrawals","withDrawTokens","loadWithdrawableEth","withdrawBalance","loadLotteryParticipation","loadTotalShares","loadMyShares","getMyBalance","from","getLandscapes","transformLandscape","loadLandscape","getLandscape","index","highestBid","highestBidder","endDate","triggerDetailLoad","loadBidHistory","loadOwnerHistory","getPastEvents","fromBlock","toBlock","returnValues","reverse","newOwner","oldOwner","events","NewLandscape","debouncer","LandscapeLotteryFinished","winner","resolver","width","rows","PendingWithdrawalChanged","addr","AuctionCreated","BidCreated","getState","AuctionFinished","LandscapeNameChanged","newName","LandscapeTransferred","LandscapeLotterySharesPurchased","nrOfParticipants","LandscapeLotteryNewParticipant","loadLatestParticipant","then","getAvailableWithdrawals","getLatestParticipant","getParticipants","getMyShares","getTotalAmountOfShares","isParticipating","resolveLottery","resolve","send","collectNFT","nftName","withDrawLandscape","withdraw","participateLottery","sharesToBuy","toFixed","participate","toWei","String","bid","controlUiState","Alert","content","endAuction","startAuction","minPrice","changeName","transferOwnership","newOwnerAddress","transferLandscape","collectWin","this","isAddress","work","eventHandleFn","txMap","clearTimeout","transactionHash","transactionLogIndex","setTimeout","AccountAddress","recalc","pointInTimeSeconds","ifFinished","remainingSecs","Date","now","days","floor","remAfterDays","hours","remAfterHours","minutes","round","str","trim","Countdown","useState","remainingStr","setRemainingStr","useEffect","x","setInterval","clearInterval","StartAuctionModal","setShowModal","showModal","formValueTime","setFormValueTime","formValueAmount","setFormValueAmount","Modal","onHide","Header","Title","Body","Form","fluid","FormGroup","ControlLabel","InputNumber","step","onChange","min","Footer","Button","appearance","type","millis","durationMin","contractService","LandscapeAuctionDetailView","isUserOwner","getNextBid","myAddress","auctionHighestBid","auctionHighestBidder","auctionEndDate","formValueBid","setFormValueBid","bidError","setBidError","isAuctionStartInProgress","isAuctionEndInProgress","isAuctionBidInProgress","isEndDateReached","setEndDateReached","ceil","interval","startForm","biddingForm","endAuctionButton","formatSeconds","toLocaleString","displayEth","didIParticipated","findIndex","b","maxWidth","disabled","display","flexDirection","flexWrap","layout","Tag","color","highestBidEth","Badge","expiringDate","Icon","icon","EndDate","Timeline","Item","ChangeProcessingHint","processing","alignItems","marginLeft","LandscapeNameView","isChangingName","startChangingName","stopChangingName","isProcessingChange","changedName","setChangedName","doNameChange","InputGroup","Input","flex","IconButton","OwnerHistoryView","setEvents","firstOwner","align","transfer","OwnerHistoryEntry","timeFormatted","TransferOwnershipView","formValue","setFormValue","confirmOpened","setConfirmOpened","isTransferInProgress","valid","setValid","executeTransfer","cancelTransfer","FormControl","errorMessage","isValidAddress","backdrop","fontSize","LandscapeDetailView","useIsUserOwner","justifyContent","height","paddingLeft","paddingRight","marginTop","Divider","LandscapeDetailPage","LotteryWithdrawModal","closeModal","StringType","Schema","Types","model","Model","isRequired","textAlign","margin","LotteryView","lotteryLocked","lotteryAdminLocked","lotteryWithdrawLocked","isOwner","sharesSelected","padding","max","block","visibility","List","bordered","hover","sortable","WithdrawalView","myBalance","withdrawing","MyAuctionsList","myAuctions","MyLandscapesPage","NavigationBar","props","currKeyword","navigate","Navbar","Nav","active","onSelect","NotFoundPage","showCurrentPage","App","isLoading","navigateTo","Message","showIcon","cursor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.046b7484.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const landscapesSlice = createSlice({\r\n    name: \"landscapes\",\r\n    initialState: {\r\n        landscapes: [\r\n        ],\r\n        loading: true,\r\n        uiState: {},\r\n    },\r\n    reducers: {\r\n        setLandscapes: (state, { payload: landscapes }) => {\r\n            state.landscapes = landscapes;\r\n        },\r\n        updateLandscape: (state, { payload: landscape }) => {\r\n            state.landscapes[Number(landscape.landscapeId)] = landscape;\r\n        },\r\n        finishLandscapesLoading: (state) => {\r\n            state.loading = false;\r\n        },\r\n        startLandscapesLoading: (state) => {\r\n            state.loading = true;\r\n        },\r\n        setBidHistory: (state, { payload: { landscapeId, bids } }) => {\r\n            state.landscapes[Number(landscapeId)].auction.bids = bids;\r\n        },\r\n        addAuctionBid: (state, { payload: { auctionId, landscapeId, bidder, amount, time } }) => {\r\n            state.landscapes[Number(landscapeId)].auction.bids.unshift({ auctionId, landscapeId, bidder, amount, time });\r\n        },\r\n        setOwnerHistory: (state, { payload: { landscapeId, ownerHistory } }) => {\r\n            state.landscapes[Number(landscapeId)].ownerHistory = [...ownerHistory];\r\n        },\r\n        setLandscapeUiState: (state, { payload: { landscapeId, topic, value } }) => {\r\n            state.uiState[Number(landscapeId)] = {\r\n                ...state.uiState[landscapeId],\r\n                [topic]: value,\r\n            };\r\n        },\r\n    },\r\n});\r\n\r\n// Action creators are generated for each case reducLer function\r\nexport const {\r\n    updateLandscape,\r\n    setLandscapes,\r\n    addAuctionBid,\r\n    finishLandscapesLoading,\r\n    setLandscapeUiState,\r\n    startLandscapesLoading,\r\n    setBidHistory,\r\n    setOwnerHistory,\r\n} = landscapesSlice.actions;\r\n\r\nexport default landscapesSlice.reducer;\r\n","import { useCallback, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setLandscapeUiState } from \"../state/slices/landscapes.reducer\";\r\n\r\nexport function useAccountLandscapes(ethAddress) {\r\n    const { landscapes, loading } = useSelector((state) => state.landscapes);\r\n\r\n    const myLandscapes = useMemo(() => {\r\n        return landscapes.filter((landscape) => {\r\n            return landscape.owner?.toLowerCase() === ethAddress?.toLowerCase();\r\n        });\r\n    }, [landscapes, ethAddress]);\r\n\r\n    return { myLandscapes, loading };\r\n}\r\n\r\nexport function useRunningAuctionsFilter(landscapes) {\r\n    const auctions = useMemo(() => {\r\n        return landscapes.filter((landscape) => {\r\n            return landscape.auction.running === true;\r\n        });\r\n    }, [landscapes]);\r\n    return auctions;\r\n}\r\n\r\nexport function useIsUserOwner(landscape) {\r\n    const ethAddress = useSelector((state) => state.app.ethAddress);\r\n\r\n    return landscape.owner?.toLowerCase() === ethAddress?.toLowerCase();\r\n}\r\n\r\nexport function useUiState(landscapeId, topic) {\r\n    const dispatch = useDispatch();\r\n    const landscapeUiState = useSelector((state) => state.landscapes.uiState[landscapeId]);\r\n\r\n    const turnOn = useCallback(() => {\r\n        dispatch(setLandscapeUiState({ landscapeId, topic, value: true }));\r\n    }, [dispatch, landscapeId, topic]);\r\n\r\n    const turnOff = useCallback(() => {\r\n        dispatch(setLandscapeUiState({ landscapeId, topic, value: false }));\r\n    }, [dispatch, landscapeId, topic]);\r\n\r\n    const uiState = landscapeUiState == null ? false : landscapeUiState[topic] || false;\r\n    return [uiState, turnOn, turnOff];\r\n}\r\n","\r\nexport function navTo(navState){\r\n    window.location.href = \"#\" + encodeURIComponent(window.btoa(JSON.stringify(navState)));\r\n}","import \"./NFT.css\";\r\nimport React from \"react\";\r\nimport { ReactSVG } from \"react-svg\";\r\n\r\nconst randomColor = require(\"randomcolor\"); // import the script\r\n\r\nexport default function NFT({ dna, style }) {\r\n    let baseImgPath = \"\";\r\n    let featureValues = [];\r\n\r\n    for (var i = 0; i < 16; i += 2) {\r\n        if (i === 2 || i === 4) {\r\n            featureValues.push(+dna.substring(i, i + 1));\r\n            featureValues.push(+dna.substring(i + 1, i + 2));\r\n        } else featureValues.push(+dna.substring(i, i + 2));\r\n    }\r\n\r\n    switch (featureValues[0]) {\r\n        case 10:\r\n            baseImgPath = \"images/Sunrise.svg\";\r\n            break;\r\n        case 11:\r\n            baseImgPath = \"images/City.svg\";\r\n            break;\r\n        case 12:\r\n            baseImgPath = \"images/Galaxy.svg\";\r\n            break;\r\n        case 13:\r\n            baseImgPath = \"images/Farm.svg\";\r\n            break;\r\n        case 14:\r\n            baseImgPath = \"images/Fantasy.svg\";\r\n            break;\r\n        case 15:\r\n            baseImgPath = \"images/PillarsOfCreation.svg\";\r\n            break;\r\n        case 16:\r\n            baseImgPath = \"images/Mars.svg\";\r\n            break;\r\n        default:\r\n            throw new Error(\"invalid image \" + featureValues[0]);\r\n    }\r\n\r\n    const hues = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\", \"pink\", \"monochrome\"];\r\n\r\n    const featureColors = randomColor({\r\n        count: 8,\r\n        hue: hues[featureValues[1] % 8],\r\n        seed: featureValues[3],\r\n    });\r\n\r\n    const bgColors = randomColor({\r\n        count: 2,\r\n        hue: hues[featureValues[2] % 8],\r\n        seed: featureValues[4],\r\n    });\r\n\r\n    const className = \"nft_\" + Math.random().toString(36).substr(2, 5);\r\n\r\n    return (\r\n        <>\r\n            <ReactSVG className={className} src={baseImgPath} style={style} />\r\n            <style\r\n                dangerouslySetInnerHTML={{\r\n                    __html: [\r\n                        \".\" + className + \" .background-1 {\",\r\n                        \"  stop-color: \" + bgColors[0] + \" !important;\",\r\n                        \"}\",\r\n                        \".\" + className + \" .background-2 {\",\r\n                        \"  stop-color: \" + bgColors[1] + \" !important;\",\r\n                        \"}\",\r\n                        \".\" + className + \" .feature-1 {\",\r\n                        \"  fill: \" + featureColors[0] + \" !important;\",\r\n                        \"}\",\r\n                        \".\" + className + \" .feature-2 {\",\r\n                        \"  fill: \" + featureColors[1] + \" !important;\",\r\n                        \"}\",\r\n                        \".\" + className + \" .feature-3 {\",\r\n                        \"  fill: \" + featureColors[2] + \" !important;\",\r\n                        \"}\",\r\n                        \".\" + className + \" .feature-4 {\",\r\n                        \"  fill: \" + featureColors[3] + \" !important;\",\r\n                        \"}\",\r\n                        \".\" + className + \" .feature-5 {\",\r\n                        \"  fill: \" + featureColors[4] + \" !important;\",\r\n                        \"}\",\r\n                        \".\" + className + \"> svg {\",\r\n                        \"width: 100%; height: 100%\",\r\n                        \"}\",\r\n                    ].join(\"\\n\"),\r\n                }}\r\n            ></style>\r\n        </>\r\n    );\r\n}\r\n","import { navTo } from \"../../nav\";\r\nimport NFT from \"../NFT/NFT\";\r\nimport \"./LandscapeCard.css\";\r\n\r\nexport default function LandscapeCard({ landscape: { name, landscapeId, dna } }) {\r\n    const navigateToLandscape = () => {\r\n        navTo({ keyword: \"landscape-detail\", landscapeId });\r\n    };\r\n    return (\r\n        <div className=\"landscape-card\" onClick={navigateToLandscape}>\r\n            <NFT dna={dna} />\r\n            <h2 className=\"landscape-title\">{name}</h2>\r\n        </div>\r\n    );\r\n}\r\n","import LandscapeCard from \"../LandscapeCard/LandscapeCard\";\r\nimport \"./LandscapesList.css\";\r\n\r\nexport default function LandscapesList({ landscapes }) {\r\n    return (\r\n        <div className=\"landscapes-list\">\r\n            {landscapes.map((l) => (\r\n                <LandscapeCard key={l.landscapeId} landscape={l} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import { Loader } from \"rsuite\";\r\nimport { useAccountLandscapes } from \"../hooks/landscapes\";\r\nimport LandscapesList from \"./LandscapesList/LandscapesList\";\r\n\r\nexport default function AccountDetailPage({ address }) {\r\n    const { myLandscapes, loading } = useAccountLandscapes(address);\r\n\r\n    if (loading) {\r\n        return <Loader size=\"lg\" center />\r\n    } else {\r\n        return (\r\n            <>\r\n                <h2>Landscapes of {address}</h2>\r\n                <LandscapesList landscapes={myLandscapes} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import { useSelector } from \"react-redux\";\r\nimport { Loader } from \"rsuite\";\r\nimport { useRunningAuctionsFilter } from \"../hooks/landscapes\";\r\nimport LandscapesList from \"./LandscapesList/LandscapesList\";\r\n\r\nexport default function AllAuctionsList() {\r\n    const { landscapes, loading } = useSelector((state) => state.landscapes);\r\n    const allAuctions = useRunningAuctionsFilter(landscapes);\r\n\r\n    if (loading) {\r\n        return <Loader size=\"lg\" center />\r\n    } else {\r\n        return (\r\n                <LandscapesList landscapes={allAuctions} />\r\n        );\r\n    }\r\n}\r\n","import { useSelector } from \"react-redux\";\r\nimport { Loader } from \"rsuite\";\r\nimport LandscapesList from \"./LandscapesList/LandscapesList\";\r\n\r\nexport default function AllLandscapesList() {\r\n    const { landscapes, loading } = useSelector((state) => state.landscapes);\r\n\r\n    if (loading) {\r\n        return <Loader size=\"lg\"  center/>;\r\n    } else {\r\n        return (\r\n                <LandscapesList landscapes={landscapes} />\r\n        );\r\n    }\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst INITAL_NAV_STATE = { keyword: \"my-landscapes\" };\r\nconst getPersistedNavState = () => {\r\n    try {\r\n        let hash = window.location.hash;\r\n        if (hash.startsWith(\"#\")) hash = hash.substring(1);\r\n        const data = JSON.parse(window.atob(decodeURIComponent(hash)));\r\n        if (data.keyword) {\r\n            return data;\r\n        } else {\r\n            return INITAL_NAV_STATE;\r\n        }\r\n    } catch (e) {\r\n        return INITAL_NAV_STATE;\r\n    }\r\n};\r\n\r\nexport const appSlice = createSlice({\r\n    name: \"app\",\r\n    initialState: {\r\n        initialized: false,\r\n        navState: getPersistedNavState(),\r\n        ethAddress: null,\r\n        owner: false,\r\n        error: null,\r\n        withdrawableEth: 0,\r\n        isWithdrawing: false,\r\n    },\r\n    reducers: {\r\n        finishInit: (state) => {\r\n            state.initialized = true;\r\n        },\r\n        appNavigate: (state, { payload }) => {\r\n            state.navState = { ...payload };\r\n        },\r\n        setMyETHAddress: (state, { payload }) => {\r\n            state.ethAddress = payload;\r\n        },\r\n        setOwner: (state, {payload}) => {\r\n            state.owner = payload;\r\n        },\r\n        setAppError: (state, {payload}) => {\r\n            state.error = payload;\r\n        },\r\n        setWithDrawableEth: (state, {payload}) => {\r\n            state.withdrawableEth = payload;\r\n        },\r\n        setIsWithdrawing: (state, {payload}) => {\r\n            state.isWithdrawing = payload;\r\n        }\r\n    },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { finishInit, appNavigate, setMyETHAddress, setOwner, setAppError, setWithDrawableEth, setIsWithdrawing } = appSlice.actions;\r\n\r\nexport default appSlice.reducer;\r\n\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const lotterySlice = createSlice({\r\n    name: \"lottery\",\r\n    initialState: {\r\n        participating: false,\r\n        locked: false,\r\n        myShares: 0,\r\n        totalShares: 0,\r\n        participants: [],\r\n        availableWinWithdrawals: 0,\r\n        showWithdrawModal: false,\r\n        withdrawLocked: false,\r\n        selectedShares: 1,\r\n    },\r\n    reducers: {\r\n        addParticipation: (state) => {\r\n            state.participating = true;\r\n        },\r\n        delParticipation: (state) => {\r\n            state.participating = false;\r\n        },\r\n        lockLottery: (state) => {\r\n            state.locked = true;\r\n        },\r\n        unlockLottery: (state) => {\r\n            state.locked = false;\r\n        },\r\n        lockAdminLottery: (state) => {\r\n            state.adminLocked = true;\r\n        },\r\n        unlockAdminLottery: (state) => {\r\n            state.adminLocked = false;\r\n        },\r\n        setMyShares:(state, { payload: amountOfShares }) => {\r\n            state.myShares = amountOfShares;\r\n        },\r\n        setTotalShares: (state, {payload: amountOfShares}) => {\r\n            state.totalShares = amountOfShares;\r\n        },\r\n        setParticipants: (state, {payload: participants}) => {\r\n            state.participants = participants;\r\n        },\r\n        addLatestParticipant: (state, {payload: participant}) => {\r\n            if(!state.participants.includes(participant)) {\r\n                state.participants = [...state.participants, participant];\r\n            }\r\n        },\r\n        setAvailableWinWithdrawals: (state, {payload: nrOfAvailableWithdrawals }) => {\r\n           state.availableWinWithdrawals = Number(nrOfAvailableWithdrawals);\r\n        },\r\n        setShowWithdrawModal: (state, {payload: show}) => {\r\n            state.showWithdrawModal = show;\r\n        },\r\n        lockWithdraw: (state) => {\r\n            state.withdrawLocked = true;\r\n        },\r\n        unlockWithdraw: (state) => {\r\n            state.withdrawLocked = false;\r\n        },\r\n        setSelectedShares: (state, {payload: amount}) => {\r\n            state.selectedShares = amount;\r\n        }\r\n    },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { delParticipation, addParticipation, lockLottery, unlockLottery, lockAdminLottery, unlockAdminLottery, setMyShares, setTotalShares, setParticipants, addLatestParticipant, setAvailableWinWithdrawals, setShowWithdrawModal, lockWithdraw, unlockWithdraw, setSelectedShares } = lotterySlice.actions;\r\nexport default lotterySlice.reducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport appReducer, { appNavigate } from \"./slices/app.reducer\";\r\nimport landscapesReducer from \"./slices/landscapes.reducer\";\r\nimport lotteryReducer from \"./slices/lottery.reducer\";\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        landscapes: landscapesReducer,\r\n        app: appReducer,\r\n        lottery: lotteryReducer\r\n    },\r\n});\r\n\r\nexport default store; \r\n\r\n\r\nwindow.onhashchange = e => console.log(e);\r\n\r\n\r\nwindow.onhashchange = e => {\r\n    const splitted = e.newURL.split(\"#\", 2);\r\n    if(splitted.length === 2){\r\n        store.dispatch(appNavigate(JSON.parse(window.atob(decodeURIComponent(splitted[1])))));\r\n    }\r\n}\r\n","import { appNavigate } from \"../state/slices/app.reducer\";\r\nimport store from \"../state/store\";\r\n\r\nexport default function LandscapeLink({ children, landscapeId }) {\r\n    return (\r\n        <a\r\n            href={\"#\" + landscapeId}\r\n            onClick={(e) => {\r\n                e.preventDefault();\r\n                store.dispatch(appNavigate({ keyword: \"landscape-detail\", landscapeId }));\r\n            }}\r\n        >\r\n            {children}\r\n        </a>\r\n    );\r\n}\r\n","import { Alert, Notification } from \"rsuite\";\r\nimport LandscapeLink from \"../components/LandscapeLink\";\r\nimport NFT from \"../components/NFT/NFT\";\r\n\r\nexport function noParticipants() {\r\n    Alert.error({\r\n        content: 'No participants yet',\r\n        duration: 2000\r\n    })\r\n}\r\n\r\nexport function didNotWinLottery() {\r\n    Notification.info({\r\n        title: \"Lottery has concluded\",\r\n        duration: 2000,\r\n        description: (\r\n            <p style={{ width: 320 }} rows={3}>\r\n                Unfortunately, you did not win!\r\n            </p>\r\n        ),\r\n    });\r\n}\r\n\r\nexport function auctionNotFinished(expiringDate) {\r\n    Notification.error({\r\n        title: \"Please wait until Auction finished\",\r\n        duration: 2000,\r\n        description: (\r\n            <p style={{ width: 320 }} rows={3}>\r\n                Auction ends at {new Date(expiringDate * 1000).toLocaleString()}\r\n            </p>\r\n        ),\r\n    });\r\n}\r\n\r\nexport function receivedLandscape(landscape) {\r\n    Notification.info({\r\n        title: \"You received a new landscape\",\r\n        duration: 5000,\r\n        description: (\r\n            <LandscapeLink landscapeId={landscape.landscapeId}>\r\n                <NFT dna={landscape.dna} />\r\n                <p>{landscape.name}</p>\r\n            </LandscapeLink>\r\n        ),\r\n    });\r\n}\r\n\r\nexport function withdrawAvailable() {\r\n    Notification.info({\r\n        title: \"Withdrawal available\",\r\n        duration: 5000,\r\n        description: <p>Withdraw your previous auction bids from the CryptoLandscape contract</p>,\r\n    });\r\n}\r\n\r\nexport function auctionCreated(landscape) {\r\n    Notification.info({\r\n        title: \"New auction\",\r\n        duration: 5000,\r\n        description: (\r\n            <LandscapeLink landscapeId={landscape.landscapeId}>\r\n                <NFT dna={landscape.dna} />\r\n                <p>Landscape available for auction</p>\r\n            </LandscapeLink>\r\n        ),\r\n    });\r\n}\r\n\r\n\r\nexport function outbidModal(landscape){\r\n    Notification.info({\r\n        title: \"You have been outbid!\",\r\n        duration: 5000,\r\n        description: (\r\n            <LandscapeLink landscapeId={landscape.landscapeId}>\r\n                Your previous bid on {landscape.name} was outbid\r\n            </LandscapeLink>\r\n        )\r\n    })\r\n}","import Web3 from \"web3\";\r\nimport { Alert } from \"rsuite\";\r\nimport * as LandscapeContract from \"../contracts_abi/FetchableLandscape.json\";\r\nimport store from \"../state/store\";\r\nimport { finishInit, setAppError, setMyETHAddress, setOwner, setWithDrawableEth, setIsWithdrawing} from \"../state/slices/app.reducer\";\r\nimport {\r\n    addParticipation,\r\n    delParticipation,\r\n    lockAdminLottery,\r\n    unlockAdminLottery,\r\n    lockLottery,\r\n    unlockLottery,\r\n    setMyShares,\r\n    setTotalShares,\r\n    setParticipants,\r\n    addLatestParticipant,\r\n    setAvailableWinWithdrawals,\r\n    setShowWithdrawModal,\r\n    lockWithdraw,\r\n    unlockWithdraw,\r\n} from \"../state/slices/lottery.reducer\";\r\nimport {\r\n    finishLandscapesLoading,\r\n    setLandscapes,\r\n    setLandscapeUiState,\r\n    startLandscapesLoading,\r\n    updateLandscape,\r\n    setBidHistory,\r\n    setOwnerHistory,\r\n    addAuctionBid,\r\n} from \"../state/slices/landscapes.reducer\";\r\nimport { auctionCreated, didNotWinLottery, outbidModal, receivedLandscape } from \"./notifications\";\r\n\r\nconst CONTRACT_ADDRESS = \"0x90926E45c3f2de3B0C617F0ec86679D81E5D19af\";\r\n\r\nclass ContractService {\r\n    init = async () => {\r\n        if (this.initialized) return;\r\n        if (!window.ethereum) {\r\n            store.dispatch(setAppError(\"No accessible Etherum wallet found.<br> Install MetaMask https://metamask.io/\"));\r\n            return;\r\n        }\r\n        this.web3 = new Web3(window.ethereum);\r\n        await window.ethereum.enable();\r\n        this.contract = new this.web3.eth.Contract(LandscapeContract.abi, CONTRACT_ADDRESS);\r\n        const accounts = await this.web3.eth.requestAccounts();\r\n        this.refreshAccount(accounts);\r\n        window.ethereum.on(\"accountsChanged\", this.refreshAccount);\r\n\r\n        this.initListeners();\r\n\r\n        store.dispatch(finishInit());\r\n        this.initialized = true;\r\n    };\r\n\r\n    refreshAccount = async (accounts) => {\r\n        this.account = accounts[0];\r\n        console.log(\"myAccount\", this.account);\r\n        const owner = await this.contract.methods.owner().call();\r\n        console.log(\"ownerAccount\", owner);\r\n        if (owner.toLowerCase() === this.account.toLowerCase()) {\r\n            store.dispatch(setOwner(true));\r\n            const participants = await this.loadParticipants();\r\n            store.dispatch(setParticipants(participants));\r\n        } else {\r\n            store.dispatch(setOwner(false));\r\n        }\r\n        this.loadInitialData();\r\n    };\r\n\r\n    convertWeiToEth = (amount) => {\r\n        return Web3.utils.fromWei(amount.toString(), \"ether\");\r\n    };\r\n\r\n    isValidAddress(addr) {\r\n        return this.web3.utils.isAddress(addr);\r\n    }\r\n\r\n    loadInitialData = async () => {\r\n        store.dispatch(setMyETHAddress(this.account));\r\n        store.dispatch(startLandscapesLoading());\r\n        const landscapes = await this.loadAllLandscapes();\r\n        store.dispatch(setLandscapes(landscapes));\r\n        store.dispatch(finishLandscapesLoading());\r\n        const withDrawTokens = await this.loadAvailableNftWithdrawals();\r\n        store.dispatch(setAvailableWinWithdrawals(withDrawTokens));\r\n        const withdrawBalance = await this.loadWithdrawableEth();\r\n        store.dispatch(setWithDrawableEth(Web3.utils.fromWei(withdrawBalance)));\r\n        if (await this.loadLotteryParticipation()) {\r\n            const totalShares = await this.loadTotalShares();\r\n            const myShares = await this.loadMyShares();\r\n            store.dispatch(setMyShares(myShares));\r\n            store.dispatch(setTotalShares(totalShares));\r\n            store.dispatch(addParticipation());\r\n        } else {\r\n            store.dispatch(delParticipation());\r\n        }\r\n    };\r\n\r\n    getMyAddress() {\r\n        return this.account;\r\n    }\r\n\r\n    loadWithdrawableEth = async() => {\r\n        return this.contract.methods.getMyBalance().call({from: this.account});\r\n    }\r\n\r\n    loadWithdrawableEth = async() => {\r\n        return this.contract.methods.getMyBalance().call({from: this.account});\r\n    }\r\n\r\n    loadAllLandscapes = async () => {\r\n        return ((await this.contract.methods.getLandscapes().call()) || []).map(this.transformLandscape);\r\n    };\r\n\r\n    loadLandscape = async (landscapeId) => {\r\n        return this.transformLandscape(await this.contract.methods.getLandscape(landscapeId).call(), landscapeId);\r\n    };\r\n\r\n    transformLandscape = (landscape, index) => {\r\n        return {\r\n            name: landscape.name,\r\n            landscapeId: index,\r\n            dna: landscape.dna,\r\n            owner: landscape.owner,\r\n            auction: {\r\n                auctionId: Number(landscape.auction.auctionId),\r\n                highestBid: landscape.auction.highestBid,\r\n                highestBidder: landscape.auction.highestBidder,\r\n                endDate: Number(landscape.auction.endDate),\r\n                running: landscape.auction.running,\r\n                bids: [],\r\n            },\r\n\r\n            ownerHistory: [],\r\n        };\r\n    };\r\n\r\n    triggerDetailLoad = async (landscapeId, auctionId) => {\r\n        store.dispatch(setBidHistory({ landscapeId, bids: await this.loadBidHistory(auctionId) }));\r\n        store.dispatch(setOwnerHistory({ landscapeId, ownerHistory: await this.loadOwnerHistory(landscapeId) }));\r\n    };\r\n\r\n    loadBidHistory = async (auctionId) => {\r\n        const data = await this.contract.getPastEvents(\"BidCreated\", { fromBlock: 0, toBlock: \"latest\", filter: { auctionId: auctionId + \"\" } });\r\n        return (data || [])\r\n            .map(({ returnValues: { auctionId, landscapeId, bidder, amount, time } }) => ({\r\n                auctionId,\r\n                landscapeId,\r\n                bidder,\r\n                amount: Number(amount),\r\n                time: Number(time),\r\n            }))\r\n            .reverse();\r\n    };\r\n\r\n    loadOwnerHistory = async (landscapeId) => {\r\n        const data = await this.contract.getPastEvents(\"LandscapeTransferred\", {\r\n            fromBlock: 0,\r\n            toBlock: \"latest\",\r\n            filter: { landscapeId: landscapeId + \"\" },\r\n        });\r\n        return (data || [])\r\n            .map(({ returnValues: { landscapeId, newOwner, oldOwner, time } }) => {\r\n                return {\r\n                    landscapeId,\r\n                    newOwner,\r\n                    oldOwner,\r\n                    time: Number(time),\r\n                };\r\n            })\r\n            .reverse();\r\n    };\r\n\r\n    initListeners = () => {\r\n        console.log(\"registered listeners\");\r\n        this.contract.events\r\n            .NewLandscape()\r\n            .on(\r\n                \"data\",\r\n                debouncer(async ({ landscapeId, owner }) => {\r\n                    const landscape = await this.loadLandscape(landscapeId);\r\n                    store.dispatch(updateLandscape(landscape));\r\n                    if (landscape.owner === this.account) {\r\n                        receivedLandscape(landscape);\r\n                    }\r\n                })\r\n            )\r\n            .on(\"error\", console.error);\r\n\r\n        this.contract.events\r\n            .LandscapeLotteryFinished()\r\n            .on(\r\n                \"data\",\r\n                debouncer(async ({ winner, resolver }) => {\r\n                    console.log(\"LandscapeLotteryFinished. Winner was: \", winner);\r\n                    store.dispatch(setTotalShares(0));\r\n                    store.dispatch(setMyShares(0));\r\n                    store.dispatch(setParticipants([]));\r\n                    store.dispatch(delParticipation());\r\n                    if (winner.toLowerCase() === this.account.toLowerCase()) {\r\n                        const withDrawTokens = await this.loadAvailableNftWithdrawals();\r\n                        store.dispatch(setAvailableWinWithdrawals(withDrawTokens));\r\n                        store.dispatch(setShowWithdrawModal(true));\r\n                    } else {\r\n                        didNotWinLottery();\r\n                    }\r\n                })\r\n            )\r\n            .on(\"changed\", (e) => {\r\n                console.log(e);\r\n            })\r\n            .on(\"error\", console.error);\r\n\r\n        this.contract.events\r\n            .PendingWithdrawalChanged()\r\n            .on(\"data\", debouncer(async ({addr}) => {\r\n                if(this.account === addr){\r\n                    const withdrawBalance = await this.loadWithdrawableEth();\r\n                    store.dispatch(setWithDrawableEth(Web3.utils.fromWei(withdrawBalance)));\r\n                }\r\n            }))\r\n            .on(\"error\", console.error);\r\n\r\n        this.contract.events\r\n            .AuctionCreated()\r\n            .on(\r\n                \"data\",\r\n                debouncer(async ({ landscapeId }) => {\r\n                    const landscape = await this.loadLandscape(landscapeId)\r\n                    store.dispatch(updateLandscape(landscape));\r\n                    if(this.account !== landscape.owner){\r\n                        auctionCreated(landscape);\r\n                    }\r\n                })\r\n            )\r\n            .on(\"error\", console.error);\r\n\r\n        this.contract.events\r\n            .BidCreated()\r\n            .on(\r\n                \"data\",\r\n                debouncer(async ({ auctionId, landscapeId, bidder, amount, time }) => {\r\n                    const landscape = store.getState().landscapes.landscapes[Number(landscapeId)];\r\n                    if(landscape.auction.bids.length > 0){\r\n                        const prevBid = landscape.auction.bids[0];\r\n                        if(prevBid.bidder === this.account){\r\n                            outbidModal(landscape)\r\n                        }\r\n                    }\r\n                    store.dispatch(updateLandscape({\r\n                        ...landscape,\r\n                        auction: {\r\n                            ...landscape.auction,\r\n                            highestBid: amount,\r\n                            highestBidder: bidder\r\n                        }\r\n                    }));\r\n                    store.dispatch(addAuctionBid({ auctionId, landscapeId, bidder, amount, time }));\r\n                    const withdrawBalance = await this.loadWithdrawableEth();\r\n                    store.dispatch(setWithDrawableEth(Web3.utils.fromWei(withdrawBalance)));\r\n                })\r\n            )\r\n            .on(\"error\", console.error);\r\n\r\n        this.contract.events\r\n            .AuctionFinished()\r\n            .on(\r\n                \"data\",\r\n                debouncer(async ({ landscapeId }) => {\r\n                    store.dispatch(updateLandscape(await this.loadLandscape(landscapeId)));\r\n                    console.log(\"AuctionFinished \", landscapeId);\r\n                })\r\n            )\r\n            .on(\"error\", console.error);\r\n\r\n        this.contract.events\r\n            .LandscapeNameChanged()\r\n            .on(\r\n                \"data\",\r\n                debouncer(({ landscapeId, newName }) => {\r\n                    const landscape = store.getState().landscapes.landscapes[Number(landscapeId)];\r\n                    store.dispatch(updateLandscape({ ...landscape, name: newName }));\r\n                })\r\n            )\r\n            .on(\"error\", console.error);\r\n\r\n        this.contract.events\r\n            .LandscapeTransferred()\r\n            .on(\r\n                \"data\",\r\n                debouncer(({ landscapeId, newOwner }) => {\r\n                    const landscape = store.getState().landscapes.landscapes[Number(landscapeId)];\r\n                    store.dispatch(updateLandscape({ ...landscape, owner: newOwner }));\r\n                    if (newOwner === this.account) {\r\n                        receivedLandscape(landscape);\r\n                    }\r\n                })\r\n            )\r\n            .on(\"error\", console.error);\r\n\r\n        this.contract.events\r\n            .LandscapeLotterySharesPurchased()\r\n            .on(\r\n                \"data\",\r\n                debouncer(({ nrOfParticipants }) => {\r\n                    store.dispatch(setTotalShares(nrOfParticipants));\r\n                })\r\n            )\r\n            .on(\"error\", console.error);\r\n\r\n        this.contract.events\r\n            .LandscapeLotteryNewParticipant()\r\n            .on(\r\n                \"data\",\r\n                debouncer(() => {\r\n                    this.loadLatestParticipant().then((participant) => store.dispatch(addLatestParticipant(participant)));\r\n                })\r\n            )\r\n            .on(\"error\", console.error);\r\n    };\r\n\r\n    loadAvailableNftWithdrawals = async () => {\r\n        return await this.contract.methods.getAvailableWithdrawals().call({ from: this.account });\r\n    };\r\n\r\n    loadLatestParticipant = async () => {\r\n        return await this.contract.methods.getLatestParticipant().call({ from: this.account });\r\n    };\r\n\r\n    loadParticipants = async () => {\r\n        return await this.contract.methods.getParticipants().call({ from: this.account });\r\n    };\r\n\r\n    loadMyShares = async () => {\r\n        return await this.contract.methods.getMyShares().call({ from: this.account });\r\n    };\r\n\r\n    loadTotalShares = async () => {\r\n        return await this.contract.methods.getTotalAmountOfShares().call({ from: this.account });\r\n    };\r\n\r\n    loadLotteryParticipation = async () => {\r\n        return await this.contract.methods.isParticipating().call({ from: this.account });\r\n    };\r\n\r\n    resolveLottery = async () => {\r\n        store.dispatch(lockAdminLottery());\r\n        try {\r\n            await this.contract.methods.resolve().send({ from: this.account });\r\n        } finally {\r\n            store.dispatch(unlockAdminLottery());\r\n        }\r\n    };\r\n\r\n    collectNFT = async (nftName) => {\r\n        return await this.contract.methods.withDrawLandscape(nftName).send({ from: this.account });\r\n    };\r\n\r\n    withdraw = async () => {\r\n        store.dispatch(setIsWithdrawing(true));\r\n        await this.contract.methods.withdraw().send({ from: this.account });\r\n        store.dispatch(setIsWithdrawing(false));\r\n        const withdrawBalance = await this.loadWithdrawableEth();\r\n        store.dispatch(setWithDrawableEth(Web3.utils.fromWei(withdrawBalance)));\r\n    };\r\n\r\n    participateLottery = async (sharesToBuy) => {\r\n        store.dispatch(lockLottery());\r\n        try {\r\n            const amount = (sharesToBuy * 0.0005).toFixed(4);\r\n            await this.contract.methods.participate(sharesToBuy).send({ from: this.account, value: this.web3.utils.toWei(String(amount), \"ether\") });\r\n            store.dispatch(addParticipation());\r\n            const myShares = await this.loadMyShares();\r\n            store.dispatch(setMyShares(myShares));\r\n        } finally {\r\n            store.dispatch(unlockLottery());\r\n        }\r\n    };\r\n\r\n    bid = async (landscapeId, amount) => {\r\n        controlUiState(landscapeId, \"processingAuctionBid\", async () => {\r\n            try {\r\n                await this.contract.methods.bid(landscapeId + \"\").send({ from: this.account, value: this.web3.utils.toWei(amount + \"\", \"ether\") });\r\n            } catch {\r\n                Alert.error({\r\n                        content: 'You were outbid by another user!',\r\n                        duration: 2000\r\n                    })\r\n            }\r\n        });\r\n    };\r\n\r\n    endAuction = async (landscapeId) => {\r\n        controlUiState(landscapeId, \"processingAuctionEnd\", async () => {\r\n            await this.contract.methods.endAuction(landscapeId + \"\").send({ from: this.account });\r\n        });\r\n    };\r\n\r\n    startAuction = async (landscapeId, endDate, minPrice) => {\r\n        controlUiState(landscapeId, \"processingAuctionStart\", async () => {\r\n            await this.contract.methods\r\n                .startAuction(landscapeId + \"\", endDate + \"\", this.web3.utils.toWei(minPrice, \"ether\"))\r\n                .send({ from: this.account });\r\n        });\r\n    };\r\n\r\n    changeName = async (landscapeId, newName) => {\r\n        if (newName == null) return;\r\n\r\n        controlUiState(landscapeId, \"processingNameChange\", async () => {\r\n            await this.contract.methods\r\n                .changeName(landscapeId, newName)\r\n                .send({ from: this.account, value: this.web3.utils.toWei(\"0.0005\", \"ether\") });\r\n        });\r\n    };\r\n\r\n    transferOwnership = async (landscapeId, newOwnerAddress) => {\r\n        controlUiState(landscapeId, \"processingOwnershipTransfer\", async () => {\r\n            await this.contract.methods.transferLandscape(landscapeId, newOwnerAddress).send({ from: this.account });\r\n        });\r\n    };\r\n\r\n    collectWin = async (nftName) => {\r\n        store.dispatch(lockWithdraw());\r\n        await this.collectNFT(nftName);\r\n        const withDrawTokens = await this.loadAvailableNftWithdrawals();\r\n        store.dispatch(setAvailableWinWithdrawals(withDrawTokens));\r\n        store.dispatch(unlockWithdraw());\r\n    };\r\n}\r\n\r\nconst controlUiState = async (landscapeId, topic, work) => {\r\n    store.dispatch(setLandscapeUiState({ landscapeId, topic: topic, value: true }));\r\n    try {\r\n        await work();\r\n    } catch (e) {\r\n        throw e;\r\n    } finally {\r\n        store.dispatch(setLandscapeUiState({ landscapeId, topic: topic, value: false }));\r\n    }\r\n};\r\n\r\nconst debouncer = (eventHandleFn) => {\r\n    const txMap = {};\r\n    return (e) => {\r\n        clearTimeout(txMap[e.transactionHash + e.transactionLogIndex]);\r\n        txMap[e.transactionHash + e.transactionLogIndex] = setTimeout(() => {\r\n            eventHandleFn(e.returnValues);\r\n            delete txMap[e.transactionHash + e.transactionLogIndex];\r\n        }, 200);\r\n    };\r\n};\r\n\r\nexport default new ContractService();\r\n","import { navTo } from \"../nav\";\r\n\r\nexport default function AccountAddress({ address }) {\r\n    const navigate = e => {\r\n        e.preventDefault();\r\n        navTo({ keyword: \"account-detail\", address });\r\n    };\r\n    return (\r\n        <a href={'#account-' + address} onClick={navigate}>\r\n            {address}\r\n        </a>\r\n    );\r\n}\r\n","import { useEffect, useState } from \"react\"\r\n\r\nconst recalc = (pointInTimeSeconds, ifFinished) => {\r\n    const remainingSecs = (pointInTimeSeconds * 1000) - Date.now()\r\n    if(remainingSecs <= 0){\r\n        return ifFinished\r\n    } else {\r\n        const days = Math.floor(remainingSecs / (1000*60*60*24))\r\n        const remAfterDays = remainingSecs % (1000*60*60*24)\r\n        const hours = Math.floor(remAfterDays / (1000*60*60))\r\n        const remAfterHours = remAfterDays % (1000*60*60)\r\n        const minutes = Math.round(remAfterHours / (1000*60));\r\n        let str = '';\r\n        if(days > 0) str += days + ' days '\r\n        if(hours > 0) str += hours + ' hours '\r\n        if(minutes > 0) str += minutes + ' minutes '\r\n        if(days === 0 && hours === 0 && minutes === 0) str += 'Few moments'\r\n       return str.trim() + ' remaining'\r\n    }\r\n}\r\n\r\nexport default function Countdown({pointInTimeSeconds, ifFinished}) {\r\n    const [remainingStr, setRemainingStr] = useState('');\r\n\r\n    useEffect(() => {\r\n        setRemainingStr(recalc(pointInTimeSeconds, ifFinished))\r\n        const x = setInterval(() => setRemainingStr(recalc(pointInTimeSeconds, ifFinished)), 1000*60)\r\n        return () => {\r\n            clearInterval(x)\r\n        }\r\n    }, [pointInTimeSeconds, ifFinished])\r\n\r\n    return <span>{remainingStr}</span>\r\n}","import { useState } from \"react\";\r\nimport { Button, ControlLabel, Form, FormGroup, InputNumber, Modal } from \"rsuite\";\r\nimport contractService from \"../../web3/contract.service\";\r\n\r\n\r\nconst fromMillis = (millis) => Math.floor(millis / 1000);\r\n\r\nexport default function StartAuctionModal({setShowModal, showModal, landscape}){\r\n    const [formValueTime, setFormValueTime] = useState(5);\r\n    const [formValueAmount, setFormValueAmount] = useState(0.001);\r\n\r\n    const submitForm = () => {\r\n        setShowModal(false);\r\n        const durationMin = formValueTime * 60;\r\n        contractService.startAuction(landscape.landscapeId, fromMillis(Date.now()) + durationMin, formValueAmount + \"\");\r\n    };\r\n\r\n    return (\r\n        <Modal show={showModal} onHide={() => setShowModal(false)} size=\"xs\">\r\n        <Modal.Header>\r\n            <Modal.Title>Create a new Auction</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <Form fluid>\r\n                <FormGroup>\r\n                    <ControlLabel>Duration in Minutes</ControlLabel>\r\n                    <InputNumber value={formValueTime} step={1} onChange={setFormValueTime} min={1} />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <ControlLabel>Startprice</ControlLabel>\r\n                    <InputNumber value={formValueAmount} step={0.001} onChange={setFormValueAmount} min={0.001} />\r\n                </FormGroup>\r\n            </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button appearance=\"primary\" type=\"submit\" onClick={submitForm}>\r\n                Submit\r\n            </Button>\r\n            <Button onClick={() => setShowModal(false)} appearance=\"subtle\">\r\n                Cancel\r\n            </Button>\r\n        </Modal.Footer>\r\n    </Modal>\r\n    )\r\n}","import { useEffect, useMemo, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Alert, Badge, Button, Form, FormGroup, Icon, InputNumber, Loader, Tag, Timeline } from \"rsuite\";\r\nimport { useUiState } from \"../../hooks/landscapes\";\r\nimport contractService from \"../../web3/contract.service\";\r\nimport { auctionNotFinished } from \"../../web3/notifications\";\r\nimport AccountAddress from \"../AccountAddress\";\r\nimport Countdown from \"../Countdown\";\r\nimport \"./LandscapeAuctionDetailView.css\";\r\nimport StartAuctionModal from \"./StartAuctionModal\";\r\n\r\nexport default function LandscapeAuctionDetailView({ landscape, isUserOwner }) {\r\n    //Calculate the next higher Bid\r\n    const getNextBid = () => {\r\n        const highestBid = Number(contractService.convertWeiToEth(auction.highestBid));\r\n        return Number((highestBid + 0.001).toFixed(3));\r\n    };\r\n    // this is my address\r\n    const myAddress = useSelector((state) => state.app.ethAddress);\r\n    // this is the auction data\r\n    const auction = landscape.auction;\r\n    const auctionHighestBid = useSelector((state) => state.landscapes.landscapes[Number(landscape.landscapeId)].auction.highestBid);\r\n    const auctionHighestBidder = useSelector((state) => state.landscapes.landscapes[Number(landscape.landscapeId)].auction.highestBidder);\r\n    const auctionEndDate = useSelector((state) => state.landscapes.landscapes[Number(landscape.landscapeId)].auction.endDate);\r\n\r\n    const [formValueBid, setFormValueBid] = useState(getNextBid());\r\n    const [showModal, setShowModal] = useState();\r\n    const [bidError, setBidError] = useState(null);\r\n\r\n    const [isAuctionStartInProgress] = useUiState(landscape.landscapeId, \"processingAuctionStart\");\r\n    const [isAuctionEndInProgress] = useUiState(landscape.landscapeId, \"processingAuctionEnd\");\r\n    const [isAuctionBidInProgress] = useUiState(landscape.landscapeId, \"processingAuctionBid\");\r\n\r\n\r\n    const [isEndDateReached, setEndDateReached] = useState(false);\r\n\r\n    // refresh isEndDateReached all 30s\r\n    useEffect(() => {\r\n        setEndDateReached(auctionEndDate < Math.ceil(Date.now() / 1000));\r\n        const interval = setInterval(() => {\r\n            setEndDateReached(auctionEndDate < Math.ceil(Date.now() / 1000));\r\n        }, 1000*30)\r\n        return () => clearInterval(interval)\r\n    }, [auctionEndDate]);\r\n\r\n    const formatSeconds = () => new Date(auction.endDate * 1000).toLocaleString();\r\n    const displayEth = (amount) => Number(contractService.convertWeiToEth(amount)).toFixed(3) + \" ETH\";\r\n\r\n    const didIParticipated = useMemo(() => {\r\n        return auction.bids?.findIndex((b) => b.bidder === myAddress) >= 0\r\n    }, [auction.bids, myAddress]);\r\n\r\n    //Check if deisred value is bigger than highest bid.\r\n    const setBid = () => {\r\n        if (formValueBid <= contractService.convertWeiToEth(auctionHighestBid)) {\r\n            const highestBidEth = contractService.convertWeiToEth(auctionHighestBid);\r\n            setBidError(`Your bid is to small. Highest Bid is currently ${highestBidEth}`);\r\n            console.log(\"new amount\", getNextBid());\r\n            setFormValueBid(getNextBid());\r\n        } else {\r\n            setBidError(null);\r\n            try {\r\n                contractService.bid(landscape.landscapeId, formValueBid);\r\n            } catch(e){\r\n                Alert.error({content: 'Bid transaction failed. Please try again.'})\r\n            }\r\n        }\r\n    };\r\n\r\n    const submitEndOfAuction = () => {\r\n        if (isEndDateReached) {\r\n            try {\r\n                contractService.endAuction(landscape.landscapeId);\r\n            } catch(e){\r\n                Alert.error({content: 'Ending auction failed. Please try again.'})\r\n            }\r\n        } else {\r\n            auctionNotFinished(auctionEndDate);\r\n        }\r\n    };\r\n\r\n    let startForm;\r\n    if (isUserOwner && !auction.running) {\r\n        startForm = (\r\n            <>\r\n                <p style={{ maxWidth: \"800px\" }}>\r\n                    You can sell your CryptLandscape by starting an auction. Everyone can bid for you CryptoLandscape until a fixed date. Afterwards,\r\n                    you (or the highest bidder) can complete the auction by transfering the CryptoLandscape and the coins.\r\n                </p>\r\n                <br />\r\n                {!isAuctionStartInProgress && (\r\n                    <Button appearance=\"ghost\" disabled={auction.running || isAuctionStartInProgress} onClick={() => setShowModal(true)}>\r\n                        Start Auction\r\n                    </Button>\r\n                )}\r\n                {isAuctionStartInProgress && (\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"nowrap\" }}>\r\n                        <Loader />\r\n                        &nbsp;<span>Auction is being started...</span>\r\n                    </div>\r\n                )}\r\n                <br />\r\n            </>\r\n        );\r\n    }\r\n\r\n    let biddingForm;\r\n    if (auction.running && !isEndDateReached) {\r\n        biddingForm = (\r\n            <>\r\n                <br />\r\n                <Form layout=\"inline\">\r\n                    <FormGroup>\r\n                        <InputNumber\r\n                            disabled={isAuctionBidInProgress}\r\n                            value={formValueBid}\r\n                            step={0.001}\r\n                            onChange={setFormValueBid}\r\n                            min={getNextBid()}\r\n                        />\r\n                        {bidError && <Tag color=\"red\">{bidError}</Tag>}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Button appearance=\"ghost\" disabled={isAuctionBidInProgress} loading={isAuctionBidInProgress} onClick={setBid}>\r\n                            Bid\r\n                        </Button>\r\n                    </FormGroup>\r\n                </Form>\r\n            </>\r\n        );\r\n    }\r\n\r\n    let endAuctionButton;\r\n    if (auction.running && (isUserOwner || myAddress === auctionHighestBidder)) {\r\n        endAuctionButton = (\r\n            <Badge content={isEndDateReached}>\r\n                <Button\r\n                    appearance=\"ghost\"\r\n                    disabled={!isEndDateReached || isAuctionEndInProgress}\r\n                    loading={isAuctionEndInProgress}\r\n                    onClick={submitEndOfAuction}\r\n                >\r\n                    End Auction\r\n                </Button>\r\n            </Badge>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h4>Auction</h4>\r\n            {!auction.running && !isUserOwner && (\r\n                <p>\r\n                    <Icon icon=\"info\" />\r\n                    &nbsp;There is no ongoing auction for this beauty\r\n                </p>\r\n            )}\r\n            {startForm}\r\n            {auction.running && (\r\n                <table className=\"auction-info-table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                <Icon icon=\"clock-o\" /> End date\r\n                            </td>\r\n                            <td>\r\n                                <Countdown\r\n                                    pointInTimeSeconds={auction.endDate}\r\n                                    ifFinished={`Auction closed (Ended at ${formatSeconds(auction.EndDate)})`}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <Icon icon=\"tag\" /> Highest bid\r\n                            </td>\r\n                            <td>\r\n                                {displayEth(auction.highestBid)}\r\n                                &nbsp;&nbsp;\r\n                                {auction.highestBidder === myAddress && <Tag color=\"green\">It's you!</Tag>}\r\n                                {auction.highestBidder !== myAddress && didIParticipated && <Tag color=\"red\">You have been outbid!</Tag>}\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            )}\r\n            {biddingForm}\r\n            {endAuctionButton}\r\n            {auction.running && (\r\n                <div>\r\n                    <br />\r\n                    <h5>Bids</h5>\r\n                    <Timeline>\r\n                        {(auction.bids || []).map((b) => (\r\n                            <Timeline.Item key={b.time}>\r\n                                <i>{formatSeconds(b.time)}</i>: <strong>{displayEth(b.amount)}</strong> by <AccountAddress address={b.bidder} />\r\n                            </Timeline.Item>\r\n                        ))}\r\n                    </Timeline>\r\n                    {(auction.bids || []).length === 0 && <p>No bids yet</p>}\r\n                </div>\r\n            )}\r\n            <StartAuctionModal setShowModal={setShowModal} showModal={showModal} landscape={landscape} />\r\n        </div>\r\n    );\r\n}\r\n","import { Loader } from \"rsuite\";\r\n\r\nexport default function ChangeProcessingHint({ processing }) {\r\n    if (processing) {\r\n        return (\r\n            <div style={{ display: \"flex\", alignItems: \"center\"}}>\r\n                <Loader />\r\n                <p style={{ display: \"inline-block\", marginLeft: 3, color: \"grey\" }}>Change is being processed...</p>\r\n            </div>\r\n        );\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n","import { useState } from \"react\";\r\nimport { Alert, Icon, IconButton, Input, InputGroup } from \"rsuite\";\r\nimport { useUiState } from \"../../hooks/landscapes\";\r\nimport contractService from \"../../web3/contract.service\";\r\nimport ChangeProcessingHint from \"../ChangeProcessingHint\";\r\n\r\nexport default function LandscapeNameView({ landscapeId, name, isUserOwner }) {\r\n    const [isChangingName, startChangingName, stopChangingName] = useUiState(landscapeId, \"isChangingName\");\r\n    const [isProcessingChange] = useUiState(landscapeId, \"processingNameChange\");\r\n    const [changedName, setChangedName] = useState(name);\r\n\r\n    const doNameChange = async () => {\r\n        if (changedName !== name) {\r\n            try {\r\n                await contractService.changeName(landscapeId, changedName);\r\n            } catch (e) {\r\n                Alert.error(\"Could not change name\");\r\n                console.error(e);\r\n            }\r\n        }\r\n        stopChangingName();\r\n    };\r\n\r\n    if (isChangingName && !isProcessingChange) {\r\n        return (\r\n            <InputGroup>\r\n                <Input value={changedName} onChange={setChangedName} />\r\n                <InputGroup.Button onClick={doNameChange} appearance=\"ghost\">\r\n                    <Icon icon=\"check\" />\r\n                </InputGroup.Button>\r\n                <InputGroup.Button onClick={stopChangingName} appearance=\"ghost\">\r\n                    <Icon icon=\"close\" />\r\n                </InputGroup.Button>\r\n            </InputGroup>\r\n        );\r\n    } else {\r\n        return (\r\n            <div style={{ display: \"flex\", flexWrap: \"nowrap\", flexDirection: \"row\", alignItems: \"center\" }}>\r\n                <h3>{name}</h3>\r\n                <div style={{ flex: 1, width: \"auto\" }}></div>\r\n                <ChangeProcessingHint processing={isProcessingChange} />\r\n                {isUserOwner && !isProcessingChange && (\r\n                    <IconButton\r\n                        appearance=\"ghost\"\r\n                        onClick={() => {\r\n                            startChangingName();\r\n                            setChangedName(name);\r\n                        }}\r\n                        icon={<Icon icon=\"pencil\" />}\r\n                    />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { useEffect, useMemo, useState } from \"react\";\r\nimport { Timeline } from \"rsuite\";\r\nimport contractService from \"../../web3/contract.service\";\r\nimport AccountAddress from \"../AccountAddress\";\r\n\r\nexport default function OwnerHistoryView({ landscapeId }) {\r\n    const [events, setEvents] = useState([]);\r\n\r\n    const firstOwner = useMemo(() => {\r\n        return events[events.length - 1]?.oldOwner;\r\n    }, [events]);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                setEvents((await contractService.loadOwnerHistory(landscapeId)) || []);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        })();\r\n    }, [landscapeId]);\r\n\r\n    if(events == null || events.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Owner History</h3>\r\n            <Timeline align=\"left\">\r\n                {events.map((transfer, index) => (\r\n                    <OwnerHistoryEntry key={index} time={transfer.time} newOwner={transfer.newOwner} />\r\n                ))}\r\n                <Timeline.Item time=\"Lottery Win\">\r\n                    <AccountAddress address={firstOwner} />\r\n                </Timeline.Item>\r\n            </Timeline>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst OwnerHistoryEntry = ({ newOwner, time }) => {\r\n    const timeFormatted = useMemo(() => {\r\n        if (time == null) return \" \";\r\n        return new Date(time * 1000).toLocaleString();\r\n    }, [time]);\r\n    return (\r\n        <Timeline.Item time={timeFormatted}>\r\n            <AccountAddress address={newOwner} />\r\n        </Timeline.Item>\r\n    );\r\n};\r\n","import { useState } from \"react\";\r\nimport { Alert, Button, ControlLabel, Form, FormControl, FormGroup, Icon, Modal } from \"rsuite\";\r\nimport { useUiState } from \"../../hooks/landscapes\";\r\nimport { navTo } from \"../../nav\";\r\nimport ContractService from \"../../web3/contract.service\";\r\nimport ChangeProcessingHint from \"../ChangeProcessingHint\";\r\n\r\nexport default function TransferOwnershipView({ landscapeId }) {\r\n    const [formValue, setFormValue] = useState();\r\n    const [confirmOpened, setConfirmOpened] = useState(false);\r\n    const [isTransferInProgress] = useUiState(landscapeId, \"processingOwnershipTransfer\");\r\n    const [valid, setValid] = useState(true);\r\n\r\n    const submitForm = () => {\r\n        if (formValue && formValue[\"newOwnerAddress\"] !== \"\" && ContractService.isValidAddress(formValue[\"newOwnerAddress\"])) {\r\n            setConfirmOpened(true);\r\n            setValid(true);\r\n        } else {\r\n            setValid(false);\r\n        }\r\n    };\r\n    const executeTransfer = async () => {\r\n        try {\r\n            setConfirmOpened(false);\r\n            await ContractService.transferOwnership(landscapeId, formValue[\"newOwnerAddress\"]);\r\n            navTo({ keyword: \"my-landscapes\" });\r\n        } catch (e) {\r\n            Alert.error(\"Transfer failed\");\r\n            console.error(e);\r\n        }\r\n    };\r\n\r\n    const cancelTransfer = () => {\r\n        setConfirmOpened(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h4>Transfer ownership</h4>\r\n            <Form layout=\"inline\" onChange={setFormValue}>\r\n                <FormGroup>\r\n                    <ControlLabel>Address of new owner</ControlLabel>\r\n                    <FormControl name=\"newOwnerAddress\" size=\"lg\" errorMessage={!valid ? \"Invalid target address\" : null} />\r\n                </FormGroup>\r\n                <Button disabled={isTransferInProgress} appearance=\"ghost\" onClick={submitForm}>\r\n                    Transfer\r\n                </Button>\r\n                <ChangeProcessingHint processing={isTransferInProgress} />\r\n            </Form>\r\n\r\n            <Modal backdrop=\"static\" show={confirmOpened} onHide={cancelTransfer} size=\"xs\">\r\n                <Modal.Body>\r\n                    <Icon\r\n                        icon=\"remind\"\r\n                        style={{\r\n                            color: \"#ffb300\",\r\n                            fontSize: 60,\r\n                        }}\r\n                    />\r\n                    {\"  \"}\r\n                    <br />\r\n                    This action will transfer ownership of this landscape to new address:\r\n                    <pre>{(formValue || {})[\"newOwnerAddress\"]}</pre>\r\n                    This operation cannot be undone.\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={executeTransfer} appearance=\"primary\" color=\"red\">\r\n                        Transfer\r\n                    </Button>\r\n                    <Button onClick={cancelTransfer} appearance=\"subtle\">\r\n                        Cancel\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { Divider } from \"rsuite\";\r\nimport { useIsUserOwner } from \"../../hooks/landscapes\";\r\nimport contractService from \"../../web3/contract.service\";\r\nimport AccountAddress from \"../AccountAddress\";\r\nimport LandscapeAuctionDetailView from \"../LandscapeAuctionDetailView/LandscapeAuctionDetailView\";\r\nimport LandscapeNameView from \"../LandscapeNameView/LandscapeNameView\";\r\nimport NFT from \"../NFT/NFT\";\r\nimport OwnerHistoryView from \"../OwnerHistoryView/OwnerHistoryView\";\r\nimport TransferOwnershipView from \"../TransferOwnershipView/TransferOwnershipView\";\r\n\r\nimport \"./LandscapeDetailView.css\";\r\n\r\nexport default function LandscapeDetailView({ landscape }) {\r\n    const isUserOwner = useIsUserOwner(landscape);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            await contractService.triggerDetailLoad(landscape.landscapeId, landscape.auction.auctionId);\r\n        })();\r\n    }, [landscape.landscapeId, landscape.auction.auctionId, landscape.owner])\r\n\r\n    return (\r\n        <div className=\"landscape-detail-view\">\r\n            <NFT dna={landscape.dna} style={{display: 'flex', justifyContent: 'center', height: '30vh'}} />\r\n            <div style={{ paddingLeft: \"2em\", paddingRight: \"1em\",marginTop: '0.2em' }}>\r\n                <LandscapeNameView landscapeId={landscape.landscapeId} name={landscape.name} isUserOwner={isUserOwner} />\r\n                <table className=\"landscape-data-table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>DNA:</td>\r\n                            <td>{landscape.dna}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Owner:</td>\r\n                            <td>\r\n                                <AccountAddress address={landscape.owner} />\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <Divider />\r\n                {isUserOwner && (<><TransferOwnershipView landscapeId={landscape.landscapeId} /><Divider /></>)}\r\n                <LandscapeAuctionDetailView landscape={landscape} isUserOwner={isUserOwner} />\r\n                <Divider />\r\n                <OwnerHistoryView landscapeId={landscape.landscapeId} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { useSelector } from \"react-redux\";\r\nimport { Loader } from \"rsuite\";\r\nimport LandscapeDetailView from \"./LandscapeDetailView/LandscapeDetailView\";\r\n\r\nexport default function LandscapeDetailPage({ landscapeId }) {\r\n    const { landscapes, loading } = useSelector((state) => state.landscapes);\r\n\r\n    const landscape = landscapes[Number(landscapeId)];\r\n\r\n    if (loading) {\r\n        return <Loader size=\"lg\" center />;\r\n    } else if (landscape == null) {\r\n        return <h2>Landscape with id {landscapeId} not found</h2>;\r\n    } else {\r\n        return <LandscapeDetailView landscape={landscape} />;\r\n    }\r\n}\r\n","import { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Button, Modal, Form, FormGroup, ControlLabel, FormControl, Schema } from \"rsuite\";\r\nimport contractService from \"../../web3/contract.service\";\r\nimport store from \"../../state/store\";\r\nimport {\r\n    setShowWithdrawModal,\r\n} from \"../../state/slices/lottery.reducer\";\r\n\r\n\r\nexport default function LotteryWithdrawModal() {\r\n    const [formValue, setFormValue] = useState();\r\n    const showWithdrawModal = useSelector((state) => state.lottery.showWithdrawModal);\r\n\r\n    const closeModal = () => {\r\n        store.dispatch(setShowWithdrawModal(false));\r\n    }\r\n\r\n    const submitForm = () => {\r\n        contractService.collectWin(formValue[\"name\"]);\r\n        store.dispatch(setShowWithdrawModal(false));\r\n    }\r\n\r\n    const { StringType } = Schema.Types;\r\n    const model = Schema.Model({\r\n        name: StringType().isRequired('This field is required.')\r\n    });\r\n\r\n    return(\r\n        <Modal show={showWithdrawModal} onHide={closeModal} size=\"xs\">\r\n          <Modal.Header>\r\n            <Modal.Title>🥳🎊🎉🎊🥳🎉🎊🎉🥳🎊🎉🎊🥳</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <p style={{textAlign: 'center'}}>🥳🎊🎉🎊🥳🎉🎊🎉🥳🎊🎉🎊🥳🎉🎊🎉🎊🎉</p>\r\n              <p>\r\n                Congratulations, you have won a CryptoLandscape 🥳🥳\r\n              </p>\r\n              <br />\r\n              <Form model={model} onChange={setFormValue} fluid>\r\n                <FormGroup>\r\n                <ControlLabel>Name</ControlLabel>\r\n                <FormControl name=\"name\" />\r\n                </FormGroup>\r\n            </Form>\r\n            <p style={{textAlign: 'center',margin: '0.3em'}}>🥳🎊🎉🎊🥳🎉🎊🎉🥳🎊🎉🎊🥳🎉🎊🎉🎊🎉</p>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n          <Button appearance=\"primary\" onClick={submitForm}>\r\n                    Submit\r\n                </Button>\r\n            <Button onClick={closeModal} appearance=\"subtle\">\r\n              Cancel\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}","import { useSelector } from \"react-redux\";\r\nimport {\r\n    Button,\r\n    Divider,\r\n    InputNumber,\r\n    List,\r\n    Icon,\r\n} from \"rsuite\";\r\nimport contractService from \"../../web3/contract.service\";\r\nimport { noParticipants } from \"../../web3/notifications\";\r\nimport LotteryWithdrawModal from \"../LotteryWithdrawModal/LotteryWithdrawModal\";\r\nimport store from \"../../state/store\";\r\nimport { setShowWithdrawModal, setSelectedShares } from \"../../state/slices/lottery.reducer\";\r\n\r\nexport default function LotteryView() {\r\n    const lotteryLocked = useSelector((state) => state.lottery.locked);\r\n    const lotteryAdminLocked = useSelector((state) => state.lottery.adminLocked);\r\n    const lotteryWithdrawLocked = useSelector((state) => state.lottery.withdrawLocked);\r\n    const isOwner = useSelector((state) => state.app.owner);\r\n    const myShares = useSelector((state) => state.lottery.myShares);\r\n    const totalShares = useSelector((state) => state.lottery.totalShares);\r\n    const participants = useSelector((state) => state.lottery.participants);\r\n    const availableWinWithdrawals = useSelector((state) => state.lottery.availableWinWithdrawals);\r\n    const sharesSelected = useSelector((state) => state.lottery.selectedShares);\r\n\r\n    const showModal = () => {\r\n        store.dispatch(setShowWithdrawModal(true));\r\n    };\r\n\r\n    const purchaseShares = () => {\r\n        contractService.participateLottery(sharesSelected);\r\n    }\r\n\r\n    const tryResolve = () => {\r\n        if (participants.length > 0) contractService.resolveLottery();\r\n        else noParticipants();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <LotteryWithdrawModal />\r\n            <div style={{padding: '0.1em'}}>\r\n                <h4>Lottery</h4>\r\n                <InputNumber value={sharesSelected} min={1} max={10} step={1} onChange={(e) => store.dispatch(setSelectedShares(e))} disabled={lotteryLocked} />\r\n                <span>1 share = 0.0005 ETH</span>\r\n                <br /><br />\r\n                <Button\r\n                    appearance=\"ghost\"\r\n                    block\r\n                    onClick={purchaseShares}\r\n                    disabled={lotteryLocked}\r\n                    loading={lotteryLocked}\r\n                >\r\n                    <Icon name=\"ticket\" /> Buy lottery shares\r\n                </Button>\r\n                <br />\r\n                <table style={{ width: \"100%\" }}>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>My shares</td>\r\n                            <td style={{ width: \"50%\", textAlign: \"left\" }}>{myShares}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Win Chance:</td>\r\n                            <td>\r\n                                <strong>{totalShares > 0 ? ((myShares / totalShares) * 100).toFixed(2) : '0.00'}%</strong>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <br />\r\n\r\n                <h4 style={{visibility: (availableWinWithdrawals > 0) ? 'visible' : 'hidden'}}>\r\n                        <p>You won a price!</p>\r\n                        <Button appearance=\"ghost\" onClick={showModal} block disabled={lotteryWithdrawLocked} loading={lotteryWithdrawLocked}>\r\n                            Claim CryptoLandscape\r\n                        </Button>\r\n                    </h4>\r\n                {isOwner && (\r\n                    <>\r\n                        <Divider />\r\n                        <h4>ADMIN FUNCTIONS</h4>\r\n                        <br />\r\n\r\n                        <table style={{ width: \"100%\" }}>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td># of participants:</td>\r\n                                    <td>{participants?.length}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td># of shares:</td>\r\n                                    <td>\r\n                                        {totalShares} ({(totalShares * 0.0005).toFixed(4)} ETH)\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <br />\r\n                        <Button appearance=\"ghost\" block loading={lotteryAdminLocked} disabled={lotteryAdminLocked} onClick={tryResolve}>\r\n                            Resolve lottery\r\n                        </Button>\r\n                        <br />\r\n                        <span>Participants</span>\r\n                        <List size=\"sm\" bordered={false} hover={false} sortable={false}>\r\n                            {participants.map((e) => (\r\n                                <List.Item key={e}>{e.substr(0, 6) + \"...\" + e.substr(e.length - 4, e.length)}</List.Item>\r\n                            ))}\r\n                            {participants.length === 0 && <span>No participants yet</span>}\r\n                        </List>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import { useSelector } from \"react-redux\";\r\nimport { Button } from \"rsuite\";\r\nimport contractService from \"../../web3/contract.service\";\r\n\r\nexport default function WithdrawalView() {\r\n    const myBalance = useSelector((state) => state.app.withdrawableEth);\r\n    const withdrawing = useSelector((state) => state.app.isWithdrawing);\r\n    const withdraw = () => {\r\n        contractService.withdraw();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h4>Withdrawal</h4>\r\n            <table style={{ width: \"100%\" }}>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>Credit:</td>\r\n                        <td style={{ width: \"50%\", textAlign: \"left\" }}>{Number(myBalance).toFixed(3)} ETH</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <br />\r\n            <Button block appearance=\"ghost\" onClick={withdraw} disabled={withdrawing} loading={withdrawing}>Withdraw</Button>\r\n        </div>\r\n    );\r\n}\r\n","import { useSelector } from \"react-redux\";\r\nimport { Loader } from \"rsuite\";\r\nimport { useAccountLandscapes, useRunningAuctionsFilter } from \"../hooks/landscapes\";\r\nimport LandscapesList from \"./LandscapesList/LandscapesList\";\r\n\r\nexport default function MyAuctionsList() {\r\n    const myAddress = useSelector((state) => state.app.ethAddress);\r\n    const {myLandscapes, loading} = useAccountLandscapes(myAddress);\r\n    const myAuctions = useRunningAuctionsFilter(myLandscapes);\r\n\r\n    if (loading) {\r\n        return <Loader size=\"lg\" center />;\r\n    } else {\r\n        return (\r\n                <LandscapesList landscapes={myAuctions} />\r\n        );\r\n    }\r\n}\r\n","import { useSelector } from \"react-redux\";\r\nimport { Loader } from \"rsuite\";\r\nimport { useAccountLandscapes } from \"../hooks/landscapes\";\r\nimport LandscapesList from './LandscapesList/LandscapesList';\r\n\r\nexport default function MyLandscapesPage() {\r\n    const myAddress = useSelector((state) => state.app.ethAddress);\r\n    const {myLandscapes, loading} = useAccountLandscapes(myAddress);\r\n\r\n    if(loading){\r\n        return <Loader size=\"lg\" center />;\r\n    } else {\r\n        return (\r\n                <LandscapesList landscapes={myLandscapes} />\r\n        );\r\n    }\r\n}\r\n","import { useSelector } from \"react-redux\";\r\nimport { Nav, Navbar } from \"rsuite\";\r\n\r\nexport default function NavigationBar(props) {\r\n    const currKeyword = useSelector((state) => state.app.navState?.keyword);\r\n\r\n\r\n    const navigate = (keyword) => {\r\n        return e => {\r\n            props.navigate({ keyword: keyword });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Navbar>\r\n            <Navbar.Body>\r\n                <Nav>\r\n                    <Nav.Item active={currKeyword === \"my-landscapes\"} onSelect={navigate(\"my-landscapes\")}>\r\n                        My Landscapes\r\n                    </Nav.Item>\r\n                    <Nav.Item active={currKeyword === \"my-auctions\"} onSelect={navigate(\"my-auctions\")}>\r\n                        My Auctions\r\n                    </Nav.Item>\r\n                    <Nav.Item active={currKeyword === \"all-landscapes\"} onSelect={navigate(\"all-landscapes\")}>\r\n                        All Landscapes\r\n                    </Nav.Item>\r\n                    <Nav.Item active={currKeyword === \"all-auctions\"} onSelect={navigate(\"all-auctions\")}>\r\n                        All Auctions\r\n                    </Nav.Item>\r\n                </Nav>\r\n            </Navbar.Body>\r\n        </Navbar>\r\n    );\r\n}\r\n","import { useSelector } from \"react-redux\";\r\n\r\nexport default function NotFoundPage(){\r\n    const navState = useSelector(state => state.app.navState);\r\n\r\n    return <h3>Page not found: {navState.keyword}</h3>\r\n}","import { useSelector } from \"react-redux\";\r\nimport \"./App.css\";\r\nimport AccountDetailPage from \"./components/AccountDetailPage\";\r\nimport AllAuctionsPage from \"./components/AllAuctionsPage\";\r\nimport AllLandscapesPage from \"./components/AllLandscapesPage\";\r\nimport LandscapeDetailPage from \"./components/LandscapeDetailPage\";\r\nimport LotteryView from \"./components/LotteryView/LotteryView\";\r\nimport WithdrawalView from \"./components/WithdrawalView/WithdrawalView\";\r\nimport MyAuctionsPage from \"./components/MyAuctionsPage\";\r\nimport MyLandscapesPage from \"./components/MyLandscapesPage\";\r\nimport NavigationBar from \"./components/NavigationBar\";\r\nimport NotFoundPage from \"./components/NotFoundPage\";\r\nimport { navTo } from \"./nav\";\r\nimport ContractService from \"./web3/contract.service\";\r\nimport { Divider, Loader, Message } from \"rsuite\";\r\n\r\nContractService.init();\r\n\r\nconst showCurrentPage = (navState) => {\r\n    switch (navState.keyword) {\r\n        case \"my-auctions\":\r\n            return <MyAuctionsPage />;\r\n        case \"all-auctions\":\r\n            return <AllAuctionsPage />;\r\n        case \"my-landscapes\":\r\n            return <MyLandscapesPage />;\r\n        case \"all-landscapes\":\r\n            return <AllLandscapesPage />;\r\n        case \"landscape-detail\":\r\n            return <LandscapeDetailPage landscapeId={navState.landscapeId} />;\r\n        case \"account-detail\":\r\n            return <AccountDetailPage address={navState.address} />;\r\n        default:\r\n            return <NotFoundPage />;\r\n    }\r\n};\r\n\r\nfunction App() {\r\n    const isLoading = useSelector((state) => !state.app.initialized);\r\n    const error = useSelector((state) => state.app.error);\r\n    const navState = useSelector((state) => state.app.navState);\r\n    const navigateTo = (navState) => {\r\n        navTo(navState);\r\n    };\r\n    if (error) {\r\n        return (\r\n            <div style={{ display: \"flex\", height: \"100%\", alignItems: \"center\", justifyContent: \"center\" }}>\r\n                <Message showIcon type=\"error\" title=\"Error\" description={error} />\r\n            </div>\r\n        );\r\n    } else if (isLoading) {\r\n        return <Loader size=\"lg\" center content={<span>Please allow access to MetaMask</span>} />;\r\n    } else {\r\n        return (\r\n            <>\r\n                <div className=\"content-wrapper\">\r\n                    <div className=\"sidebar\">\r\n                        <h1\r\n                            style={{ cursor: \"pointer\", fontSize: \"2em\" }}\r\n                            onClick={(e) => {\r\n                                e.preventDefault();\r\n                                navigateTo({ keyword: \"my-landscapes\" });\r\n                            }}\r\n                        >\r\n                            CryptoLandscapes\r\n                        </h1>\r\n                        <Divider />\r\n                        <LotteryView />\r\n                        <Divider />\r\n                        <WithdrawalView />\r\n                    </div>\r\n                    <div className=\"main-content\">\r\n                        <NavigationBar navigate={navigateTo} />\r\n                        <div className=\"current-page\">{showCurrentPage(navState)}</div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport 'rsuite/dist/styles/rsuite-dark.css'\r\nimport App from \"./App\";\r\nimport './index.css'\r\n\r\nimport store from \"./state/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"react-root\")\r\n);\r\n"],"sourceRoot":""}